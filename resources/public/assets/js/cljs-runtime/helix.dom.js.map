{"version":3,"sources":["helix/dom.cljc"],"mappingsiBAAA,AAAA,jBAAKA","names":["helix.dom/tags"],"sourcesContent":["(ns helix.dom\n  (:refer-clojure :exclude [map meta time])\n  (:require\n   [helix.core :as hx]\n   [helix.impl.props :as impl.props])\n  #?(:cljs (:require-macros [helix.dom])))\n\n(declare\n input textarea option select a abbr address area article aside audio b base bdi\n bdo big blockquote body br button canvas caption cite code col colgroup data datalist\n dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form\n h1 h2 h3 h4 h5 h6 head header hr html i iframe img ins kbd keygen label legend li link\n main map mark menu menuitem meta meter nav noscript object ol optgroup output p param\n picture pre progress q rp rt ruby s samp script section small source span strong style\n sub summary sup table tbody td tfoot th thead time title tr track u ul var video wbr\n circle clipPath ellipse g line mask path pattern polyline rect svg text defs\n linearGradient polygon radialGradient stop tspan)\n\n(def tags\n  '[input textarea option select\n\n    a\n    abbr\n    address\n    area\n    article\n    aside\n    audio\n    b\n    base\n    bdi\n    bdo\n    big\n    blockquote\n    body\n    br\n    button\n    canvas\n    caption\n    cite\n    code\n    col\n    colgroup\n    data\n    datalist\n    dd\n    del\n    details\n    dfn\n    dialog\n    div\n    dl\n    dt\n    em\n    embed\n    fieldset\n    figcaption\n    figure\n    footer\n    form\n    h1\n    h2\n    h3\n    h4\n    h5\n    h6\n    head\n    header\n    hr\n    html\n    i\n    iframe\n    img\n    ins\n    kbd\n    keygen\n    label\n    legend\n    li\n    link\n    main\n    map\n    mark\n    menu\n    menuitem\n    meta\n    meter\n    nav\n    noscript\n    object\n    ol\n    optgroup\n    output\n    p\n    param\n    picture\n    pre\n    progress\n    q\n    rp\n    rt\n    ruby\n    s\n    samp\n    script\n    section\n    small\n    source\n    span\n    strong\n    style\n    sub\n    summary\n    sup\n    table\n    tbody\n    td\n    tfoot\n    th\n    thead\n    time\n    title\n    tr\n    track\n    u\n    ul\n    var\n    video\n    wbr\n\n    ;; svg\n    circle\n    clipPath\n    ellipse\n    g\n    line\n    marker\n    mask\n    path\n    pattern\n    polyline\n    rect\n    svg\n    text\n    defs\n    linearGradient\n    polygon\n    radialGradient\n    stop\n    tspan])\n\n\n(defmacro $d\n  \"Creates a new React DOM element. \\\"type\\\" ought to be a string like \\\"span\\\",\n  \\\"div\\\",etc.\n\n  When a map of props are passed as the second argument, will statically convert\n  to a JS object, specially handling things like converting kebab-case props to\n  camelCase and other transformations.\n\n  Use the special & or :& prop to merge dynamic props in.\"\n  [type & args]\n  (if (map? (first args))\n    `^js/React.Element (.createElement\n                        (hx/get-react)\n                        ~type\n                        (impl.props/dom-props ~(first args))\n                        ~@(rest args))\n    `^js/React.Element (.createElement\n                        (hx/get-react)\n                        ~type\n                        nil\n                        ~@args)))\n\n\n#?(:clj (defn gen-tag\n          [tag]\n          `(defmacro ~tag [& args#]\n             `($d ~(str '~tag) ~@args#))))\n\n#?(:clj (defmacro gen-tags\n          []\n          `(do\n             ~@(for [tag tags]\n                 (gen-tag tag)))))\n\n#?(:clj (gen-tags))\n"]}