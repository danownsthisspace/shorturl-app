{"version":3,"sources":["promesa/impl.cljc"],"mappings":"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","names":["promesa.impl/*default-promise*","js/Promise","promesa.impl/resolved","v","promesa.impl/rejected","promesa.impl/deferred","state","obj","resolve","reject","x32098","cljs.core/PROTOCOL_SENTINEL","_","promesa.impl/extend-promise!","t","p","it","f","p1__32099#","e","p1__32100#","p1__32101#","p1__32102#","p1__32103#","p1__32104#","p1__32105#","p1__32106#","p1__32107#","p1__32108#","p1__32109#","p1__32110#","p1__32111#","p1__32112#","p1__32113#","p1__32114#","executor","p1__32115#","p1__32116#","promesa.protocols/IPromiseFactory","promesa.protocols/-promise","js/Error","promesa.impl/promise->str","writer","opts","cljs.core/-write"],"sourcesContent":[";; Copyright (c) 2015-2019 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns ^:no-doc promesa.impl\n  \"Implementation of promise protocols.\"\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            [promesa.exec :as exec])\n  #?(:clj (:import\n           java.util.concurrent.CompletableFuture\n           java.util.concurrent.CompletionStage\n           java.util.concurrent.TimeoutException\n           java.util.concurrent.ExecutionException\n           java.util.concurrent.CompletionException\n           java.util.concurrent.Executor\n           java.util.function.Function\n           java.util.function.Supplier)))\n\n;; --- Global Constants\n\n#?(:cljs (def ^:dynamic *default-promise* js/Promise))\n\n(defn resolved\n  [v]\n  #?(:cljs (.resolve *default-promise* v)\n     :clj (CompletableFuture/completedFuture v)))\n\n(defn rejected\n  [v]\n  #?(:cljs (.reject *default-promise* v)\n     :clj (let [p (CompletableFuture.)]\n            (.completeExceptionally ^CompletableFuture p v)\n            p)))\n\n;; --- Promise Impl\n\n(defn deferred\n  []\n  #?(:clj (CompletableFuture.)\n     :cljs\n     (let [state #js {}\n           obj (new *default-promise*\n                    (fn [resolve reject]\n                      (set! (.-resolve state) resolve)\n                      (set! (.-reject state) reject)))]\n       (specify! obj\n         pt/ICompletable\n         (-resolve! [_ v]\n           (.resolve state v))\n         (-reject! [_ v]\n           (.reject state v))))))\n\n#?(:cljs\n   (defn extend-promise!\n     [t]\n     (extend-type t\n       pt/IPromiseFactory\n       (-promise [p] p)\n\n       pt/IPromise\n       (-map\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-bind\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-then\n         ([it f] (.then it #(f %)))\n         ([it f e] (.then it #(f %))))\n       (-mapErr\n         ([it f] (.catch it #(f %)))\n         ([it f e] (.catch it #(f %))))\n       (-thenErr\n         ([it f] (.catch it #(f %)))\n         ([it f e] (.catch it #(f %))))\n       (-handle\n         ([it f] (.then it #(f % nil) #(f nil %)))\n         ([it f e] (.then it #(f % nil) #(f nil %))))\n       (-finally\n         ([it f] (.then it #(f % nil) #(f nil %)) it)\n         ([it f executor] (.then it #(f % nil) #(f nil %)) it)))))\n\n#?(:cljs\n   (extend-promise! js/Promise))\n\n#?(:clj (def fw-identity (pu/->FunctionWrapper identity)))\n\n#?(:clj\n   (extend-protocol pt/IPromise\n     CompletionStage\n     (-map\n       ([it f]\n        (.thenApply ^CompletionStage it\n                    ^Function (pu/->FunctionWrapper f)))\n\n       ([it f executor]\n        (.thenApplyAsync ^CompletionStage it\n                         ^Function (pu/->FunctionWrapper f)\n                         ^Executor (exec/resolve-executor executor))))\n\n     (-bind\n       ([it f]\n        (.thenCompose ^CompletionStage it\n                      ^Function (pu/->FunctionWrapper f)))\n\n       ([it f executor]\n        (.thenComposeAsync ^CompletionStage it\n                           ^Function (pu/->FunctionWrapper f)\n                           ^Executor (exec/resolve-executor executor))))\n\n     (-then\n       ([it f]\n        (.thenCompose ^CompletionStage it\n                      ^Function (pu/->FunctionWrapper (comp pt/-promise f))))\n\n       ([it f executor]\n        (.thenComposeAsync ^CompletionStage it\n                           ^Function (pu/->FunctionWrapper (comp pt/-promise f))\n                           ^Executor (exec/resolve-executor executor))))\n\n     (-mapErr\n       ([it f]\n        (letfn [(handler [e]\n                  (if (instance? CompletionException e)\n                    (f (.getCause ^Exception e))\n                    (f e)))]\n          (.exceptionally ^CompletionStage it\n                          ^Function (pu/->FunctionWrapper handler))))\n\n       ([it f executor]\n        (letfn [(handler [e]\n                  (if (instance? CompletionException e)\n                    (f (.getCause ^Exception e))\n                    (f e)))]\n          ;; ONLY on JDK >= 12 it is there but in jdk<12 will throw an\n          ;; error\n          (.exceptionallyAsync ^CompletionStage it\n                               ^Function (pu/->FunctionWrapper handler)\n                               ^Executor (exec/resolve-executor executor)))))\n\n     (-thenErr\n       ([it f]\n        (letfn [(handler [v e]\n                  (if e\n                    (if (instance? CompletionException e)\n                      (pt/-promise (f (.getCause ^Exception e)))\n                      (pt/-promise (f e)))\n                    it))]\n          (as-> ^CompletionStage it $$\n            (.handle $$ ^BiFunction (pu/->BiFunctionWrapper handler))\n            (.thenCompose $$ ^Function fw-identity))))\n\n       ([it f executor]\n        (letfn [(handler [v e]\n                  (if e\n                    (if (instance? CompletionException e)\n                      (pt/-promise (f (.getCause ^Exception e)))\n                      (pt/-promise (f e)))\n                    (pt/-promise v)))]\n          (as-> ^CompletionStage it $$\n            (.handleAsync $$\n                          ^BiFunction (pu/->BiFunctionWrapper handler)\n                          ^Executor (exec/resolve-executor executor))\n            (.thenCompose $$ ^Function fw-identity)))))\n\n     (-handle\n       ([it f]\n        (as-> ^CompletionStage it $$\n          (.handle $$ ^BiFunction (pu/->BiFunctionWrapper (comp pt/-promise f)))\n          (.thenCompose $$ ^Function fw-identity)))\n\n       ([it f executor]\n        (as-> ^CompletionStage it $$\n          (.handleAsync $$\n                        ^BiFunction (pu/->BiFunctionWrapper (comp pt/-promise f))\n                        ^Executor (exec/resolve-executor executor))\n          (.thenCompose $$ ^Function fw-identity))))\n\n     (-finally\n       ([it f]\n        (.whenComplete ^CompletionStage it\n                       ^BiConsumer (pu/->BiConsumerWrapper f)))\n\n       ([it f executor]\n        (.whenCompleteAsync ^CompletionStage it\n                            ^BiConsumer (pu/->BiConsumerWrapper f)\n                            ^Executor (exec/resolve-executor executor))))\n\n     ))\n\n#?(:clj\n   (extend-type CompletableFuture\n     pt/ICancellable\n     (-cancel! [it]\n       (.cancel it true))\n     (-cancelled? [it]\n       (.isCancelled it))\n\n     pt/ICompletable\n     (-resolve! [f v] (.complete f v))\n     (-reject! [f v] (.completeExceptionally f v))\n\n     pt/IState\n     (-extract [it]\n       (try\n         (.getNow it nil)\n         (catch ExecutionException e\n           (.getCause e))\n         (catch CompletionException e\n           (.getCause e))))\n\n     (-resolved? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (.isDone it)))\n\n     (-rejected? [it]\n       (.isCompletedExceptionally it))\n\n     (-pending? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (not (.isDone it))))))\n\n;; --- Promise Factory\n\n;; This code is responsible of coercing the incoming value to a valid\n;; promise type. In some cases we will receive a valid promise object,\n;; in this case we return it as is. This is useful when you want to\n;; `then` or `map` over a plain value that can be o can not be a\n;; promise object\n\n#?(:clj\n   (extend-protocol pt/IPromiseFactory\n     CompletionStage\n     (-promise [cs] cs)\n\n     Throwable\n     (-promise [e]\n       (rejected e))\n\n     Object\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v)))\n\n   :cljs\n   (extend-protocol pt/IPromiseFactory\n     js/Error\n     (-promise [e]\n       (rejected e))\n\n     default\n     (-promise [v]\n       (resolved v))))\n\n;; --- Pretty printing\n\n(defn promise->str\n  [p]\n  \"#<Promise[~]>\")\n\n#?(:clj\n   (defmethod print-method java.util.concurrent.CompletionStage\n     [p ^java.io.Writer writer]\n     (let [status (cond\n                    (pt/-pending? p) \"pending\"\n                    (pt/-rejected? p) \"rejected\"\n                    :else \"resolved\")]\n       (.write writer ^String (format \"#object[java.util.concurrent.CompletableFuture 0x%h \\\"%s\\\"]\" (hash p) status)))))\n\n#?(:cljs\n   (extend-type js/Promise\n     IPrintWithWriter\n     (-pr-writer [p writer opts]\n       (-write writer (promise->str p)))))\n"]}