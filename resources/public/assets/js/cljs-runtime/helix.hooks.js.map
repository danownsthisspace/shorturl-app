{"version":3,"sources":["helix/hooks.cljc"],"mappings":";;;;;AAqBG,AAAI,AAAKA,6BAAeC;;AACpB,AAAKC,oCAAsBC;;AAC3B,AAAKC,2BAAaC;;AAClB,AAAKC,+BAAiBC;;AACtB,AAAKC,wCAA0BC;AAGtC,AAAA;AAAA;;;;4BAAA,5BAAaC;;AAAb,AAKG,AAAA,AAAA,CAAA,AAAA,yDAAAC,zDACEC;;AADF,AAAA,CAAAF,0BAAA,cAAA;AAMA;;;;;;;;;;;;wBAAA,xBAAMG,wDAWHC;AAXH,AAYE,IAAAC,aAAY,AAACI,yCAAeL;QAA5B,AAAAE,4CAAAD,WAAA,IAAA,/DAAOE;QAAP,AAAAD,4CAAAD,WAAA,IAAA,/DAASG;IACHE,UAAQ,AAACb,4CAAkB;mCAAKc,EAAIC;AAAT,AACE,GAAI,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,WAAA,CAAAX,gCAAA,iCAAA,KAAA,EAAA,EAAA,uCAAA,AAAAY,+DAAA,QAAA,AAAAA,rCAAYb,uEAAAA,xPAAcW,8DAAAA,0CAAAA,mGAAAA,uEAAAA;AAC5B,IAAAG,WAAG,iDAAoBC;AAApB,AACE,OAACC,8CAAML,EAAEI,EAAEH;;AADhB,AAAA,0EAAAE,wBAAAA,1FAACN,kCAAAA,4CAAAA;;AAKD,QAACA,kCAAAA,qCAAAA,LAAEG,iBAAAA;;;yBAPFA;IAAIC;;;;EAAAA;;oCAAJD,EAAIC;;;IAAJD;IAAIC;0BAAJD,EAAIC;;;;;CAA5B;AADd,AAAA,0FAWGL,EAAEG;;AAIP;;;;;sBAAA,tBAAMO,oDAIHN;AAJH,AAKE,IAAMO,MAAI,uCAAA,vCAACC;AAAX,AACE,GAAM,gBAAA,fAAM,AAAeD;AAA3B,AACE,CAAM,AAAeA,cACf,iBAAAE,SAAA,aAAwBT;AAAxB,AAAA,AAAA,CAAA,AAAAS,2BAAAnB;;AAAA,CAAA,AAAAmB,yCAEE,WAASC;AAAT,AAAA,gBAAA,ZAASA;AAAT,AACE,OAAeA;;;AAHnB,CAAA,AAAAD,2BAAAnB;;AAAA,CAAA,AAAAmB,+CAME,WAAUC,MAAKd;AAAf,AAAA,gBAAA,ZAAUc;AAAV,AACE,yDAAA,lDAACC,wCAASD,oBAAed;;;AAP7B,CAAA,AAAAa,0BAAAnB;;AAAA,CAAA,AAAAmB,6CAUE,WACIC,MAAKE;AADT,AAAA,gBAAA,ZACIF;AADJ,AAEG,yDAAA,lDAACC,wCAASD,oBAAe,iBAAAG,WAAG,AAAeH;AAAlB,AAAA,0EAAAG,wBAAAA,1FAACD,kCAAAA,4CAAAA;;;;AAZ/B,CAAA,AAAAH,6CAUE,WAGIC,MAAKE,EAAEE;AAHX,AAAA,gBAAA,ZAGIJ;AAHJ,AAIG,yDAAA,lDAACC,wCAASD,oBAAe,iBAAAK,WAAG,AAAeL;IAAlBM,WAAwBF;AAAxB,AAAA,0EAAAC,SAAAC,wBAAAD,SAAAC,5GAACJ,kCAAAA,qDAAAA;;;;AAd/B,CAAA,AAAAH,6CAUE,WAKIC,MAAKE,EAAEE,EAAEG;AALb,AAAA,gBAAA,ZAKIP;AALJ,AAMG,yDAAA,lDAACC,wCAASD,oBAAe,iBAAAQ,WAAG,AAAeR;IAAlBS,WAAwBL;IAAxBM,WAA0BH;AAA1B,AAAA,0EAAAC,SAAAC,SAAAC,wBAAAF,SAAAC,SAAAC,9HAACR,kCAAAA,8DAAAA;;;;AAhB/B,CAAA,AAAAH,6CAUE,WAOIC,MAAKE,EAAEE,EAAEG,EAAEhB;AAPf,AAAA,gBAAA,ZAOIS;AAPJ,AAQG,yDAAA,lDAACC,wCAASD,oBAAe,AAACL,8CAAMO,EAAE,AAAeF,kBAAMI,EAAEG,EAAEhB;;;AAlBhEQ;;;AAFR;;AAqBA,OAAeF;;AAInB,AAAA;;;0BAAA,kCAAAc,5DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMD,mEAEFE,QAAQC;AAFZ,AAGG,OAACC,sDAAYF,QAAQC,WAAWE;;;AAHnC,CAAA,wDAAA,xDAAML,mEAIFE,QAAQC,WAAWG;AAJvB,AAKG,OAACC,2CAEA,wCAAA,xCAAC9C;AAAD,AACE,GAAI,EAAK,GAAK,AAAC+C,oBAAIN,gBAAU,AAACO,qBAAKP;AACjC,sCAAcQ,MAAMC;AAApB,AACE,QAACT,wCAAAA,sDAAAA,hBAAQQ,kCAAAA,5BAAMC,kCAAAA;;;AACjBT;;GAJJ,CAKMA,UACNC,WACAG;;;AAdJ,CAAA,kDAAA,lDAAMN;;AAAN,AAkBA;;;AAAKY,0BAEHC;AAKF,sBAAA,tBAAMC,oDAASzB;AAAf,AACE;AAAA,AACE,IAAMZ,IAAE,CAACY,kCAAAA,oCAAAA;AAAT,AACE,GAAI,AAACmB,oBAAI/B;AACPA;;AACA4B;;;;AAGX,iCAAA,jCAAMU,0EAAcC;AAApB,AACE,SAAK,mEAAA,nEAACC,6CAAE,AAACC,gBAAMF,gBAAS,kCAAAG,jCAAS,AAACC,gBAAMJ;;AAqCjC,6BAAA,7BAAMK,kEAAgBC;AAAtB,AACE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACQ;;;KADR;AAEUlB;;;KAFV;AAGa,MAAO,KAAAJ,MAAA;;;;AAClB,OAACwB,mBAASH;;;;AAyBpB,AAAA;;;+BAAA,uCAAAxB,tEAAM6B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAM0B,wEAEFtC;AAFJ,AAEO,OAAChC,0CAAgB,AAACyD,oBAAQzB;;;AAFjC,CAAA,6DAAA,7DAAMsC,wEAGFtC,EAAEiC;AAHN,AAIG,oBAAMM;AAAN,AACE,GAAM,kDAAA,lDAACX,6CAAEK;AAAT,AACE,MAAO,KAAArB,MAAA;;AADT;;AADF;;AAGA,OAAC5C,0CAAgB,AAACyD,oBAAQzB,GAAG,AAACoC,mBAASH;;;AAP1C,CAAA,uDAAA,vDAAMK;;AAAN,AAwBA,AAAA;;;sCAAA,8CAAA7B,pFAAMgC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oEAAA,pEAAM6B,+EAEFzC;AAFJ,AAEO,OAAC9B,gDAAsB,AAACuD,oBAAQzB;;;AAFvC,CAAA,oEAAA,pEAAMyC,+EAGFzC,EAAEiC;AAHN,AAIG,oBAAMM;AAAN,AACE,GAAM,kDAAA,lDAACX,6CAAEK;AAAT,AACE,MAAO,KAAArB,MAAA;;AADT;;AADF;;AAGA,OAAC1C,gDAAsB,AAACuD,oBAAQzB,GAAG,AAACoC,mBAASH;;;AAPhD,CAAA,8DAAA,9DAAMQ;;AAAN,AAiCA,AAAA;;;;6BAAA,qCAAAhC,lEAAMkC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAM+B,sEAGF3C;AAHJ,AAGO,OAAC5B,wCAAc4B;;;AAHtB,CAAA,2DAAA,3DAAM2C,sEAIF3C,EAAEiC;AAJN,AAKG,oBAAMM;AAAN,AACE,GAAM,kDAAA,lDAACX,6CAAEK;AAAT,AACE,MAAO,KAAArB,MAAA;;AADT;;AADF;;AAGA,OAACxC,wCAAc4B,EAAE,AAACoC,mBAASH;;;AAR9B,CAAA,qDAAA,rDAAMU;;AAAN,AAyBA,AAAA;;;;iCAAA,yCAAAlC,1EAAMoC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAMiC,0EAGF7C;AAHJ,AAGO,OAAC1B,4CAAkB0B;;;AAH1B,CAAA,+DAAA,/DAAM6C,0EAIF7C,EAAEiC;AAJN,AAKG,oBAAMM;AAAN,AACE,GAAM,kDAAA,lDAACX,6CAAEK;AAAT,AACE,MAAO,KAAArB,MAAA;;AADT;;AADF;;AAGA,OAACtC,4CAAkB0B,EAAE,AAACoC,mBAASH;;;AARlC,CAAA,yDAAA,zDAAMY;;AAAN,AA4BA,AAAA;;;;0CAAA,kDAAApC,5FAAMsC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wEAAA,xEAAMmC,mFAGFpD,IAAIK;AAHR,AAGW,OAACxB,oDAA0BmB,IAAIK;;;AAH1C,CAAA,wEAAA,xEAAM+C,mFAIFpD,IAAIK,EAAEiC;AAJV,AAKG,oBAAMM;AAAN,AACE,GAAM,kDAAA,lDAACX,6CAAEK;AAAT,AACE,MAAO,KAAArB,MAAA;;AADT;;AADF;;AAGA,OAACpC,oDAA0BmB,IAAIK,EAAE,AAACoC,mBAASH;;;AAR9C,CAAA,kEAAA,lEAAMc;;AAAN,AAYA;;;AAAKC,8BAEHC;AAIF;;;;;;;;+BAAA,uCAAAC,tEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;wBAAA,AAAAE,4CAAAF,eAAA,/EAOWI;gBAPX,AAAAF,4CAAAF,eAAA,vEAO6BK;AAP7B,AAQE,IAAAC,aAAwB,AAACvE,yCACA;AAAA,AAAA,8BAK0BqE,gCACRC,oBACJ,CAACD,kDAAAA,oDAAAA;;YARxC,AAAAxE,4CAAA0E,WAAA,IAAA,nEAAOpC;gBAAP,AAAAtC,4CAAA0E,WAAA,IAAA,vEAAaC;AAAb,AAmBE,AAAC1F,0CACA;AAAA,AACE,sBAAA,WAAA,7BAAM2F;IACAC,oBACA;AAAA,AAME,GAAM,AAACC,cAAI,wDAAA,xDAACC,wCAASH;AAArB,AACE,IAAMI,QAAM,CAACR,kDAAAA,oDAAAA;AAAb,AACE,IAAAS,WACC,WAAKC;AAAL,AACE,GAKE,EAAI,AAACC,gDAAKX,kBACA,6CAAA,7CAACO,wCAASG,gCAChB,AAACC,gDAAKV,UACA,6CAAA,7CAACM,wCAASG;AACpBA;;AATF,GAgBE,AAACrC,6CAAEmC,MAAM,6CAAA,7CAACD,wCAASG;AACnBA;;AAjBF,AAAA,8BAoBgC,6CAAA,7CAACH,wCAASG,wCAClB,6CAAA,7CAACH,wCAASG,4BACdF;;;;;AAxBvB,AAAA,0FAAAC,gCAAAA,lHAACN,0CAAAA,oDAAAA;;AAFL;;;IA2BFS,cAAY,CAACX,0CAAAA,6DAAAA,rBAAUI,yCAAAA;AAnC7B,AAuCE,AAACA;;AACD;AAAA,AACE,wDAAA,QAAA,hEAAC7D,wCAAS4D;;AACV,QAACQ,4CAAAA,8CAAAA;;GA5CR,CA6CMZ,kBAAkBC;;AAExB,GAAI,EACC,AAACU,gDAAKX,kBAAkB,8CAAA,9CAACO,wCAASzC,iCAClC,AAAC6C,gDAAKV,UAAU,8CAAA,9CAACM,wCAASzC;AAG7B,IAAM0C,QAAM,CAACR,kDAAAA,oDAAAA;AAAb,AACE,IAAAa,iBAAA,uBAAmCb,gCACRC,oBACJO;AAFvB,AAAA,mFAAAK,sCAAAA,xHAACV,0CAAAA,0DAAAA;;AAMDK;;AAGF,qDAAA,9CAACD,wCAASzC","names":["helix.hooks/raw-use-effect","js/module$node_modules$react$index.useEffect","helix.hooks/raw-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","helix.hooks/raw-use-memo","js/module$node_modules$react$index.useMemo","helix.hooks/raw-use-callback","js/module$node_modules$react$index.useCallback","helix.hooks/raw-use-imperative-handle","js/module$node_modules$react$index.useImperativeHandle","helix.hooks/IStateUpdater","cljs.core/PROTOCOL_SENTINEL","cljs.core/MultiFn","helix.hooks/use-state","initial","vec__31166","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","x","xs","cljs.core/native-satisfies?","G__31170","y","cljs.core.apply","helix.hooks/use-ref","ref","js/module$node_modules$react$index.useRef","x31172","this","helix.hooks.goog$module$goog$object.set","f","G__31176","a","G__31179","G__31180","b","G__31182","G__31183","G__31184","var_args","G__31192","helix.hooks/use-reducer","js/Error","reducer","init-state","helix.hooks.use_reducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","cljs.core/ifn?","state","action","helix.hooks/use-context","js/module$node_modules$react$index.useContext","helix.hooks/wrap-fx","helix.hooks/simple-body?","body","cljs.core._EQ_","cljs.core/count","cljs.core/Symbol","cljs.core/first","helix.hooks/determine-deps","deps","G__31205","cljs.core/Keyword","cljs.core/to-array","G__31209","helix.hooks/use-effect*","goog/DEBUG","G__31212","helix.hooks/use-layout-effect*","G__31216","helix.hooks/use-memo*","G__31219","helix.hooks/use-callback*","G__31221","helix.hooks/use-imperative-handle*","helix.hooks/use-debug-value","js/module$node_modules$react$index.useDebugValue","p__31222","map__31223","cljs.core/--destructure-map","cljs.core.get","helix.hooks/use-subscription","get-current-value","subscribe","vec__31224","set-state","did-unsubscribe","check-for-updates","cljs.core/not","helix.hooks.goog$module$goog$object.get","value","G__31227","prev","cljs.core.not_EQ_","unsubscribe","G__31228"],"sourcesContent":["(ns helix.hooks\n  \"Wrapper around react hooks.\n\n  Many functions take a `deps` argument, corresponding to their React\n  equivalent.  This is an argument which can either be a a vector of\n  deps or a special keyword:\n\n  vector of deps  Use specified deps explicitly.\n  :always         Re-run hook on every render, equivalent to passing no deps\n                  vector to the hook.\n  :once           Equivalent to using [] as the deps.\n  :auto-deps      Infer the dependencies automatically from the code by finding\n                  local vars.  Not available for the function form of a hook.\"\n  #?(:clj (:require [helix.impl.analyzer :as hana])\n     :cljs (:require\n            [\"react\" :as react]\n            [goog.object :as gobj]))\n  #?(:cljs (:require-macros [helix.hooks])))\n\n\n#?(:cljs\n   (do (def raw-use-effect react/useEffect)\n       (def raw-use-layout-effect react/useLayoutEffect)\n       (def raw-use-memo react/useMemo)\n       (def raw-use-callback react/useCallback)\n       (def raw-use-imperative-handle react/useImperativeHandle)))\n\n\n(defprotocol IStateUpdater\n  \"Protocol that marks a type as callable when passed to a use-state setter.\")\n\n\n#?(:cljs\n   (extend-protocol IStateUpdater\n     MultiFn ;; multimethods\n     function))\n\n\n#?(:cljs\n   (defn use-state\n     \"Like `react/useState`, but the update function returned can be used similar\n  to `swap!` if the first argument implements `IStateUpdater`.\n  By default, this includes functions and multimethods.\n\n  Example:\n  ```\n  (let [[state set-state] (use-state {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\"\n     [initial]\n     (let [[v u] (react/useState initial)\n           updater (react/useCallback (fn [x & xs]\n                                        (if (satisfies? IStateUpdater x)\n                                          (u (fn spread-updater [y]\n                                               (apply x y xs)))\n                                          ;; if the first argument isn't valid\n                                          ;; updater, then call `u` with it\n                                          ;; ignoring other args\n                                          (u x)))\n                                      ;; `u` is guaranteed to be stable so we elide it\n                                      #js [])]\n       [v updater])))\n\n\n#?(:cljs\n   (defn use-ref\n     \"Like react/useRef. Supports accessing the \\\"current\\\" property via\n     dereference (@) and updating the \\\"current\\\" property via `reset!` and\n     `swap!`\"\n     [x]\n     (let [ref (react/useRef nil)]\n       (when (nil? (.-current ^js ref))\n         (set! (.-current ^js ref)\n               (specify! #js {:current x}\n                 IDeref\n                 (-deref [this]\n                   (.-current ^js this))\n\n                 IReset\n                 (-reset! [this v]\n                   (gobj/set this \"current\" v))\n\n                 ISwap\n                 (-swap!\n                   ([this f]\n                    (gobj/set this \"current\" (f (.-current ^js this))))\n                   ([this f a]\n                    (gobj/set this \"current\" (f (.-current ^js this) a)))\n                   ([this f a b]\n                    (gobj/set this \"current\" (f (.-current ^js this) a b)))\n                   ([this f a b xs]\n                    (gobj/set this \"current\" (apply f (.-current ^js this) a b xs)))))))\n       (.-current ^js ref))))\n\n\n#?(:cljs\n   (defn use-reducer\n     \"Just react/useReducer.\"\n     ([reducer init-state]\n      (use-reducer reducer init-state js/undefined))\n     ([reducer init-state init]\n      (react/useReducer\n       ;; handle ifn, e.g. multi-methods\n       (react/useMemo\n        #(if (and (not (fn? reducer)) (ifn? reducer))\n           (fn wrap-ifn [state action]\n             (reducer state action))\n           reducer)\n        #js [reducer])\n       init-state\n       init))))\n\n\n#?(:cljs\n   (def use-context\n     \"Just react/useContext\"\n     react/useContext))\n\n\n;; React `useEffect` expects either a function or undefined to be returned\n#?(:cljs\n   (defn wrap-fx [f]\n     (fn wrap-fx-return []\n       (let [x (f)]\n         (if (fn? x)\n           x\n           js/undefined)))))\n\n\n(defn simple-body? [body]\n  (and (= (count body) 1) (symbol? (first body))))\n\n\n#?(:clj\n   (defn deps-macro-body [env deps body simple-body-ok? deps->hook-body]\n     (cond\n       ;;\n       ;; Warn on typical errors writing body\n       ;;\n\n       ;; a single symbol\n       (and (= (count body) 1) (symbol? (first body)) (not simple-body-ok?))\n       (do (hana/warn hana/warning-simple-body env {:form body})\n           nil)\n\n\n       ;;\n       ;; Different variations of deps\n       ;;\n\n       ;; deps are passed in as a vector\n       (vector? deps) (deps->hook-body `(cljs.core/array ~@deps)\n                                       body)\n\n       ;; auto deps is passed in\n       (= deps :auto-deps) (deps->hook-body\n                            `(cljs.core/array ~@(hana/resolve-local-vars env body))\n                            body)\n\n       ;; always fire it (don't pass any deps in to hook)\n       (= deps :always) (deps->hook-body body)\n\n       ;; pass an empty array for things that should only run once\n       (= deps :once) (deps->hook-body '(cljs.core/array) body)\n\n       :else (deps->hook-body `(determine-deps ~deps) body)))\n\n   :cljs (defn determine-deps [deps]\n           (case deps\n             :once (array)\n             :always js/undefined\n             :auto-deps (throw (js/Error. \"Cannot use :auto-deps outside of macro.\"))\n             (to-array deps))))\n\n\n(defmacro use-effect\n  \"Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n\n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   ;; we provide a CLJS defn in the case when we need to pass around the hook\n   ;; as a value. This will be slower, `:auto-deps` won't work and devtools will\n   ;; be harder to read\n   (defn use-effect*\n     \"Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\"\n     ([f] (react/useEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"))))\n      (react/useEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-layout-effect\n  \"Like `use-effect` but instead calls react/useLayoutEffect.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body))))\n        ([deps fn-body]\n         `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   (defn use-layout-effect*\n     \"Like `use-effect*` but instead calls react/useLayoutEffect.\"\n     ([f] (react/useLayoutEffect (wrap-fx f)))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"))))\n      (react/useLayoutEffect (wrap-fx f) (to-array deps)))))\n\n\n(defmacro use-memo\n  \"Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function.\"\n  {:style/indent :defn}\n  [deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body))\n          merge\n          {:tag (hana/inferred-type &env fn-body)}))\n        ([deps fn-body]\n         (vary-meta\n          `(raw-use-memo (fn [] ~@fn-body)\n                         ~deps)\n          merge\n          {:tag (hana/inferred-type &env (last fn-body))}))))))\n\n\n#?(:cljs\n   (defn use-memo*\n     \"Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.\"\n     ([f] (react/useMemo f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"))))\n      (react/useMemo f (to-array deps)))))\n\n\n(defmacro use-callback\n  \"Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function.\"\n  {:style/indent :defn}\n  [deps & fn-body]\n  #?(:clj\n     (deps-macro-body\n      &env deps fn-body true\n      (fn\n        ([fn-body] `^function (raw-use-callback ~@fn-body))\n        ([deps fn-body] `^function (raw-use-callback ~@fn-body\n                                                     ~deps))))))\n\n#?(:cljs\n   (defn use-callback*\n     \"`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.\"\n     ([f] (react/useCallback f))\n     ([f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"))))\n      (react/useCallback f (to-array deps)))))\n\n\n(defmacro use-imperative-handle\n  \"Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function.\"\n  {:style/indent :defn}\n  [ref deps & body]\n  #?(:clj\n     (deps-macro-body\n      &env deps body false\n      (fn\n        ([fn-body] `(raw-use-imperative-handle ref (fn [] ~@fn-body)))\n        ([deps fn-body] `(raw-use-imperative-handle\n                          (fn [] ~@fn-body)\n                          ~deps))))))\n\n\n#?(:cljs\n   (defn use-imperative-handle*\n     \"Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`\"\n     ([ref f] (react/useImperativeHandle ref f))\n     ([ref f deps]\n      (when goog/DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"))))\n      (react/useImperativeHandle ref f (to-array deps)))))\n\n\n#?(:cljs\n   (def use-debug-value\n     \"Just react/useDebugValue\"\n     react/useDebugValue))\n\n\n#?(:cljs\n   (defn use-subscription\n     \"Hook used for safely managing subscriptions, respecting Clojure equality.\n\n  In order to avoid removing and re-adding subscriptions each time this hook is\n  called, the parameters passed to this hook should be memoized in some way\u2013\n  either by wrapping the entire params object with `use-memo` or by wrapping the\n  individual callbacks with `use-callback`.\"\n     [{:keys [get-current-value subscribe]}]\n     (let [[state set-state] (react/useState\n                              (fn []\n                                ;; Read the current value from our subscription.\n                                ;; When this value changes, we'll schedule an update with React.\n                                ;; It's important to also store the hook params so that we can check for staleness.\n                                ;; (See the comment in checkForUpdates() below for more info.)\n                                #js {:get-current-value get-current-value\n                                     :subscribe subscribe\n                                     :value (get-current-value)}))]\n\n       ;; It is important not to subscribe while rendering because this can lead to memory leaks.\n       ;; (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n       ;; Instead, we wait until the commit phase to attach our handler.\n       ;;\n       ;; We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n       ;; so that we don't stretch the commit phase.\n       ;; This also has an added benefit when multiple components are subscribed to the same source:\n       ;; It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n       ;; (Learn more at https://codesandbox.io/s/k0yvr5970o)\n       (react/useEffect\n        (fn []\n          (let [did-unsubscribe #js {:value false}\n                check-for-updates\n                (fn check-for-updates\n                  []\n                  ;; It's possible that this callback will be invoked even after being unsubscribed,\n                  ;; if it's removed as a result of a subscription event/update.\n                  ;; In this case, React will log a DEV warning about an update from an unmounted component.\n                  ;; We can avoid triggering that warning with this check.\n                  (when (not (gobj/get did-unsubscribe \"value\"))\n                    (let [value (get-current-value)]\n                      (set-state\n                       (fn [prev]\n                         (cond\n                           ;; Ignore values from stale sources!\n                           ;; Since we subscribe and unsubscribe in a passive effect,\n                           ;; it's possible that this callback will be invoked for a stale (previous) subscription.\n                           ;; This check avoids scheduling an update for that stale subscription.\n                           (or (not= get-current-value\n                                     (gobj/get prev \"get-current-value\"))\n                               (not= subscribe\n                                     (gobj/get prev \"subscribe\")))\n                           prev\n\n                           ;; The moment we've all been waiting for... the entire\n                           ;; point of rewriting this hook in ClojureScript.\n                           ;; If the value is equal under Clojure equality to the\n                           ;; previous value, then return the previous value to\n                           ;; preserve reference equality and allow React to bail.\n                           (= value (gobj/get prev \"value\"))\n                           prev\n\n                           ;; return the new value\n                           :else #js {:get-current-value (gobj/get prev \"get-current-value\")\n                                      :subscribe (gobj/get prev \"subscribe\")\n                                      :value value}))))))\n                unsubscribe (subscribe check-for-updates)]\n            ;; Because we're subscribing in a passive effect,\n            ;; it's possible that an update has occurred between render and our effect handler.\n            ;; Check for this and schedule an update if work has occurred.\n            (check-for-updates)\n            (fn []\n              (gobj/set did-unsubscribe \"value\" true)\n              (unsubscribe))))\n        #js [get-current-value subscribe])\n\n       (if (or\n            (not= get-current-value (gobj/get state \"get-current-value\"))\n            (not= subscribe (gobj/get state \"subscribe\")))\n         ;; If parameters have changed since our last render,\n         ;; schedule an update with its current value.\n         (let [value (get-current-value)]\n           (set-state #js {:get-current-value get-current-value\n                           :subscribe subscribe\n                           :value value})\n           ;; If the subscription has been updated, we'll schedule another update with React.\n           ;; React will process this update immediately, so the old subscription value won't be committed.\n           ;; It is still nice to avoid returning a mismatched value though, so let's override the return value.\n           value)\n\n         ;; If parameters haven't changed, return value stored in state\n         (gobj/get state \"value\")))))\n"]}