{"version":3,"sources":["promesa/exec.cljc"],"mappings":"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","names":["js/promesa","js/promesa.exec","js/promesa.exec.default-scheduler","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/->ScheduledExecutor","js/promesa.exec.default-executor","promesa.exec/default-executor","promesa.exec/->MicrotaskExecutor","js/promesa.exec.current-thread-executor","promesa.exec/current-thread-executor","promesa.exec/->CurrentThreadExecutor","var_args","G__32056","promesa.exec/resolve-executor","js/Error","cljs.core/deref","cljs.core/delay?","executor","G__32062","promesa.exec/resolve-scheduler","scheduler","G__32069","promesa.exec/run!","task","promesa.protocols/-run!","promesa.exec.resolve_executor","G__32074","promesa.exec/submit!","promesa.protocols/-submit!","G__32079","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","promesa.exec.resolve_scheduler","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","promesa.exec/MicrotaskExecutor","this","f","promesa.protocols/-promise","promesa.protocols/-map","_","promesa.protocols/-mapErr","e","js/setTimeout","promesa.exec/CurrentThreadExecutor","promesa.exec/ScheduledTask","promesa.exec/->ScheduledTask","state","done-iref","promesa.exec.goog$module$goog$object.get","self","cancel-fn","promesa.exec.goog$module$goog$object.set","promesa.exec/ScheduledExecutor","done","cljs.core/volatile!","cljs.core/vreset!","tid","cancel","js/clearTimeout"],"sourcesContent":[";; Copyright (c) 2019-2020 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run!])\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            #?(:cljs [goog.object :as gobj]))\n  #?(:clj\n     (:import\n      java.util.concurrent.atomic.AtomicLong\n      java.util.concurrent.Callable\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.function.Supplier)))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n#?(:clj (declare scheduled-pool)\n   :cljs (declare ->ScheduledExecutor))\n\n#?(:cljs (declare ->MicrotaskExecutor))\n\n(declare ->CurrentThreadExecutor)\n\n(defonce default-scheduler\n  (delay #?(:clj (scheduled-pool)\n            :cljs (->ScheduledExecutor))))\n\n(defonce default-executor\n  (delay #?(:clj (ForkJoinPool/commonPool)\n            :cljs (->MicrotaskExecutor))))\n\n(defonce current-thread-executor\n  (delay (->CurrentThreadExecutor)))\n\n(defn resolve-executor\n  ([] (if (delay? default-executor) @default-executor default-executor))\n  ([executor] (if (delay? executor) @executor executor)))\n\n(defn resolve-scheduler\n  ([] (if (delay? default-scheduler) @default-scheduler default-scheduler))\n  ([scheduler] (if (delay? scheduler) @scheduler scheduler)))\n\n#?(:clj\n   (defonce processors\n     (delay (.availableProcessors (Runtime/getRuntime)))))\n\n;; --- Public Api\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([task] (pt/-run! (resolve-executor) task))\n  ([executor task] (pt/-run! (resolve-executor executor) task)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([task]\n   (pt/-submit! (resolve-executor) task))\n  ([executor task]\n   (pt/-submit! (resolve-executor executor) task)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms task]\n   (pt/-schedule! (resolve-scheduler) ms task))\n  ([scheduler ms task]\n   (pt/-schedule! (resolve-scheduler scheduler) ms task)))\n\n;; --- Pool constructorls\n\n(declare resolve-thread-factory)\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism @processors)\n           factory (cond\n                     (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                     (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                     :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. (or parallelism @processors) factory nil async?))))\n\n\n;; --- Impl\n\n#?(:clj\n   (defn- thread-factory-adapter\n     \"Adapt a simple clojure function into a\n     ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n   (defn counted-thread-factory\n     [name daemon]\n     (let [along (AtomicLong. 0)]\n       (reify ThreadFactory\n         (newThread [this runnable]\n           (doto (Thread. ^Runnable runnable)\n             (.setDaemon ^Boolean daemon)\n             (.setName (format name (.getAndIncrement along)))))))))\n\n#?(:clj\n   (defn forkjoin-named-thread-factory\n     [name]\n     (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n       (newThread [this pool]\n         (let [wth (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)]\n           (.setName wth (str name \":\" (.getPoolIndex wth)))\n           wth)))))\n\n#?(:clj\n   (defn- thread-factory\n     [{:keys [daemon priority]\n       :or {daemon true\n            priority Thread/NORM_PRIORITY}}]\n     (thread-factory-adapter\n      (fn [runnable]\n        (let [thread (Thread. ^Runnable runnable)]\n          (.setDaemon thread daemon)\n          (.setPriority thread priority)\n          thread)))))\n\n#?(:clj\n   (defn- resolve-thread-factory\n     [opts]\n     (cond\n       (map? opts) (thread-factory opts)\n       (fn? opts) (thread-factory-adapter opts)\n       (instance? ThreadFactory opts) opts\n       :else (throw (ex-info \"Invalid thread factory\" {})))))\n\n#?(:clj\n   (extend-protocol pt/IExecutor\n     Executor\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f\n                                   ^Executor this))\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->SupplierWrapper f)\n                                      ^Executor this))))\n\n\n\n;; Default executor that executes cljs/js tasks in the microtask\n;; queue.\n#?(:cljs\n   (deftype MicrotaskExecutor []\n     pt/IExecutor\n     (-run! [this f]\n       (-> (pt/-promise nil)\n           (pt/-map (fn [_] (f) nil))\n           (pt/-mapErr (fn [e] (js/setTimeout #(throw e)) nil))))\n\n     (-submit! [this f]\n       (-> (pt/-promise nil)\n           (pt/-map (fn [_] (f)))\n           (pt/-mapErr (fn [e] (js/setTimeout #(throw e)) nil))))))\n\n;; Executor that executes the task in the calling thread\n#?(:clj\n   (deftype CurrentThreadExecutor []\n     Executor\n     (^void execute [_ ^Runnable f]\n       (.run f)))\n\n   :cljs\n   (deftype CurrentThreadExecutor []\n     pt/IExecutor\n     (-run! [this f]\n       (f)\n       (pt/-promise nil))\n\n     (-submit! [this f]\n       (pt/-promise (f)))))\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (deftype ScheduledTask [^Future fut]\n     clojure.lang.IDeref\n     (deref [_] (.get fut))\n\n     clojure.lang.IBlockingDeref\n     (deref [_ ms default]\n       (try\n         (.get fut ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException e\n           default)))\n\n     clojure.lang.IPending\n     (isRealized [_] (and (.isDone fut)\n                          (not (.isCancelled fut))))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (.isCancelled fut))\n     (-cancel! [_]\n       (when-not (.isCancelled fut)\n         (.cancel fut true)))\n\n     Future\n     (get [_] (.get fut))\n     (get [_ timeout unit] (.get fut timeout unit))\n     (isCancelled [_] (.isCancelled fut))\n     (isDone [_] (.isDone fut))\n     (cancel [_ interrupt?] (.cancel fut interrupt?)))\n\n   :cljs\n   (deftype ScheduledTask [state]\n     cljs.core/IPending\n     (-realized? [_]\n       (let [done-iref (gobj/get state \"done\")]\n         (deref done-iref)))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (gobj/get state \"cancelled\"))\n     (-cancel! [self]\n       (when-not (pt/-cancelled? self)\n         (let [cancel-fn (gobj/get state \"cancel-fn\")]\n           (gobj/set state \"cancelled\" true)\n           (cancel-fn))))))\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [fut (.schedule this ^Callable f ^long ms TimeUnit/MILLISECONDS)]\n         (ScheduledTask. fut)))))\n\n#?(:cljs\n   (deftype ScheduledExecutor []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [done (volatile! false)\n             task #(try\n                     (f)\n                     (finally\n                       (vreset! done true)))\n             tid (js/setTimeout task ms)\n             cancel #(js/clearTimeout tid)]\n         (->ScheduledTask #js {:done done\n                               :cancelled false\n                               :cancel-fn cancel})))))\n\n(defmacro with-dispatch\n  \"Helper marcro for dispatch execution of the body to an executor\n  service.\"\n  [executor & body]\n  `(submit! ~executor (^:once fn* [] ~@body)))\n\n\n"]}